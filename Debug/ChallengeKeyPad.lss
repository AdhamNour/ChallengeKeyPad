
ChallengeKeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001040  000010d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000010d4  2**0
                  ALLOC
  3 .stab         000020dc  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001343  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000044f3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00004a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00004ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
       c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      10:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_4>
      14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
      54:	2d 04       	cpc	r2, r13
      56:	51 04       	cpc	r5, r1
      58:	75 04       	cpc	r7, r5
      5a:	99 04       	cpc	r9, r9
      5c:	bd 04       	cpc	r11, r13
      5e:	e1 04       	cpc	r14, r1
      60:	05 05       	cpc	r16, r5
      62:	29 05       	cpc	r18, r9
      64:	4d 05       	cpc	r20, r13
      66:	71 05       	cpc	r23, r1

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	20 e0       	ldi	r18, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a5 36       	cpi	r26, 0x65	; 101
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      88:	0c 94 1e 08 	jmp	0x103c	; 0x103c <_exit>

0000008c <__bad_interrupt>:
      8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initTimer>:

/*
 * Description :
 * Initializing timer registers to be CTC mode
 */
static void initTimer(){
      90:	cf 93       	push	r28
      92:	df 93       	push	r29
      94:	cd b7       	in	r28, 0x3d	; 61
      96:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = (1 << FOC2) | (1 << WGM21) | (1 << CS21); // turning on timer 2 in Compare mode (WGM21) and chosing prescaler =8 (CS21)
      98:	85 e4       	ldi	r24, 0x45	; 69
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	2a e8       	ldi	r18, 0x8A	; 138
      9e:	fc 01       	movw	r30, r24
      a0:	20 83       	st	Z, r18
	TCNT2 = 0; //initializing the counting register to be zero
      a2:	84 e4       	ldi	r24, 0x44	; 68
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	fc 01       	movw	r30, r24
      a8:	10 82       	st	Z, r1
	TIMSK |= (1 << OCIE2); // enable timer 2 compare interrupt
      aa:	89 e5       	ldi	r24, 0x59	; 89
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	29 e5       	ldi	r18, 0x59	; 89
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	f9 01       	movw	r30, r18
      b4:	20 81       	ld	r18, Z
      b6:	20 68       	ori	r18, 0x80	; 128
      b8:	fc 01       	movw	r30, r24
      ba:	20 83       	st	Z, r18
	OCR2 = 125; // setting the compare value to 250
      bc:	83 e4       	ldi	r24, 0x43	; 67
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	2d e7       	ldi	r18, 0x7D	; 125
      c2:	fc 01       	movw	r30, r24
      c4:	20 83       	st	Z, r18
	SREG|=1<<7;
      c6:	8f e5       	ldi	r24, 0x5F	; 95
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2f e5       	ldi	r18, 0x5F	; 95
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	f9 01       	movw	r30, r18
      d0:	20 81       	ld	r18, Z
      d2:	20 68       	ori	r18, 0x80	; 128
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
	_isInit=TRUE;
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_isInit>
}
      de:	00 00       	nop
      e0:	df 91       	pop	r29
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <TIMER2_startTimer2>:

void TIMER2_startTimer2 (uint8 time,void (*callback)(void)){
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	00 d0       	rcall	.+0      	; 0xec <TIMER2_startTimer2+0x6>
      ec:	1f 92       	push	r1
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	89 83       	std	Y+1, r24	; 0x01
      f4:	7b 83       	std	Y+3, r23	; 0x03
      f6:	6a 83       	std	Y+2, r22	; 0x02
	 initTimer();
      f8:	0e 94 48 00 	call	0x90	; 0x90 <initTimer>
	_callback=callback;
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	9b 81       	ldd	r25, Y+3	; 0x03
     100:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	_time=time;
     108:	89 81       	ldd	r24, Y+1	; 0x01
     10a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_time>
}
     10e:	00 00       	nop
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <__vector_4>:

ISR(TIMER2_COMP_vect){
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     124:	0f 92       	push	r0
     126:	11 24       	eor	r1, r1
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	4f 93       	push	r20
     12e:	5f 93       	push	r21
     130:	6f 93       	push	r22
     132:	7f 93       	push	r23
     134:	8f 93       	push	r24
     136:	9f 93       	push	r25
     138:	af 93       	push	r26
     13a:	bf 93       	push	r27
     13c:	ef 93       	push	r30
     13e:	ff 93       	push	r31
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
//	_counter++;
//	if(_counter==_time){
//		(*_callback)();
//		_counter=0;
//	}
	(*_callback)();
     148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     14c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     150:	fc 01       	movw	r30, r24
     152:	09 95       	icall
}
     154:	00 00       	nop
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	ff 91       	pop	r31
     15c:	ef 91       	pop	r30
     15e:	bf 91       	pop	r27
     160:	af 91       	pop	r26
     162:	9f 91       	pop	r25
     164:	8f 91       	pop	r24
     166:	7f 91       	pop	r23
     168:	6f 91       	pop	r22
     16a:	5f 91       	pop	r21
     16c:	4f 91       	pop	r20
     16e:	3f 91       	pop	r19
     170:	2f 91       	pop	r18
     172:	0f 90       	pop	r0
     174:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	00 d0       	rcall	.+0      	; 0x184 <GPIO_setupPinDirection+0x6>
     184:	1f 92       	push	r1
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	89 83       	std	Y+1, r24	; 0x01
     18c:	6a 83       	std	Y+2, r22	; 0x02
     18e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     190:	8a 81       	ldd	r24, Y+2	; 0x02
     192:	88 30       	cpi	r24, 0x08	; 8
     194:	08 f0       	brcs	.+2      	; 0x198 <GPIO_setupPinDirection+0x1a>
     196:	d0 c0       	rjmp	.+416    	; 0x338 <GPIO_setupPinDirection+0x1ba>
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	84 30       	cpi	r24, 0x04	; 4
     19c:	08 f0       	brcs	.+2      	; 0x1a0 <GPIO_setupPinDirection+0x22>
     19e:	cc c0       	rjmp	.+408    	; 0x338 <GPIO_setupPinDirection+0x1ba>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	88 2f       	mov	r24, r24
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	91 05       	cpc	r25, r1
     1aa:	e1 f1       	breq	.+120    	; 0x224 <GPIO_setupPinDirection+0xa6>
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	91 05       	cpc	r25, r1
     1b0:	1c f4       	brge	.+6      	; 0x1b8 <GPIO_setupPinDirection+0x3a>
     1b2:	89 2b       	or	r24, r25
     1b4:	49 f0       	breq	.+18     	; 0x1c8 <GPIO_setupPinDirection+0x4a>
				CLEAR_BIT(DDRD, pin_num);
			}
			break;
		}
	}
}
     1b6:	c0 c0       	rjmp	.+384    	; 0x338 <GPIO_setupPinDirection+0x1ba>
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <GPIO_setupPinDirection+0x42>
     1be:	60 c0       	rjmp	.+192    	; 0x280 <GPIO_setupPinDirection+0x102>
     1c0:	03 97       	sbiw	r24, 0x03	; 3
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <GPIO_setupPinDirection+0x48>
     1c4:	8b c0       	rjmp	.+278    	; 0x2dc <GPIO_setupPinDirection+0x15e>
				CLEAR_BIT(DDRD, pin_num);
			}
			break;
		}
	}
}
     1c6:	b8 c0       	rjmp	.+368    	; 0x338 <GPIO_setupPinDirection+0x1ba>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
     1c8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	a9 f4       	brne	.+42     	; 0x1f8 <GPIO_setupPinDirection+0x7a>
				SET_BIT(DDRA, pin_num);
     1ce:	8a e3       	ldi	r24, 0x3A	; 58
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	2a e3       	ldi	r18, 0x3A	; 58
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	62 2f       	mov	r22, r18
     1dc:	2a 81       	ldd	r18, Y+2	; 0x02
     1de:	42 2f       	mov	r20, r18
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <GPIO_setupPinDirection+0x6e>
     1e8:	22 0f       	add	r18, r18
     1ea:	33 1f       	adc	r19, r19
     1ec:	4a 95       	dec	r20
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <GPIO_setupPinDirection+0x6a>
     1f0:	26 2b       	or	r18, r22
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
			} else {
				CLEAR_BIT(DDRA, pin_num);
			}
			break;
     1f6:	a0 c0       	rjmp	.+320    	; 0x338 <GPIO_setupPinDirection+0x1ba>
		switch (port_num) {
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
				SET_BIT(DDRA, pin_num);
			} else {
				CLEAR_BIT(DDRA, pin_num);
     1f8:	8a e3       	ldi	r24, 0x3A	; 58
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	2a e3       	ldi	r18, 0x3A	; 58
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	62 2f       	mov	r22, r18
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	42 2f       	mov	r20, r18
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <GPIO_setupPinDirection+0x98>
     212:	22 0f       	add	r18, r18
     214:	33 1f       	adc	r19, r19
     216:	4a 95       	dec	r20
     218:	e2 f7       	brpl	.-8      	; 0x212 <GPIO_setupPinDirection+0x94>
     21a:	20 95       	com	r18
     21c:	26 23       	and	r18, r22
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
			}
			break;
     222:	8a c0       	rjmp	.+276    	; 0x338 <GPIO_setupPinDirection+0x1ba>
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	a9 f4       	brne	.+42     	; 0x254 <GPIO_setupPinDirection+0xd6>
				SET_BIT(DDRB, pin_num);
     22a:	87 e3       	ldi	r24, 0x37	; 55
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	27 e3       	ldi	r18, 0x37	; 55
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	20 81       	ld	r18, Z
     236:	62 2f       	mov	r22, r18
     238:	2a 81       	ldd	r18, Y+2	; 0x02
     23a:	42 2f       	mov	r20, r18
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	02 c0       	rjmp	.+4      	; 0x248 <GPIO_setupPinDirection+0xca>
     244:	22 0f       	add	r18, r18
     246:	33 1f       	adc	r19, r19
     248:	4a 95       	dec	r20
     24a:	e2 f7       	brpl	.-8      	; 0x244 <GPIO_setupPinDirection+0xc6>
     24c:	26 2b       	or	r18, r22
     24e:	fc 01       	movw	r30, r24
     250:	20 83       	st	Z, r18
			} else {
				CLEAR_BIT(DDRB, pin_num);
			}
			break;
     252:	72 c0       	rjmp	.+228    	; 0x338 <GPIO_setupPinDirection+0x1ba>
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
				SET_BIT(DDRB, pin_num);
			} else {
				CLEAR_BIT(DDRB, pin_num);
     254:	87 e3       	ldi	r24, 0x37	; 55
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	27 e3       	ldi	r18, 0x37	; 55
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	62 2f       	mov	r22, r18
     262:	2a 81       	ldd	r18, Y+2	; 0x02
     264:	42 2f       	mov	r20, r18
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	21 e0       	ldi	r18, 0x01	; 1
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_setupPinDirection+0xf4>
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	4a 95       	dec	r20
     274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_setupPinDirection+0xf0>
     276:	20 95       	com	r18
     278:	26 23       	and	r18, r22
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
			}
			break;
     27e:	5c c0       	rjmp	.+184    	; 0x338 <GPIO_setupPinDirection+0x1ba>
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
     280:	8b 81       	ldd	r24, Y+3	; 0x03
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	a9 f4       	brne	.+42     	; 0x2b0 <GPIO_setupPinDirection+0x132>
				SET_BIT(DDRC, pin_num);
     286:	84 e3       	ldi	r24, 0x34	; 52
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	24 e3       	ldi	r18, 0x34	; 52
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	f9 01       	movw	r30, r18
     290:	20 81       	ld	r18, Z
     292:	62 2f       	mov	r22, r18
     294:	2a 81       	ldd	r18, Y+2	; 0x02
     296:	42 2f       	mov	r20, r18
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <GPIO_setupPinDirection+0x126>
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	4a 95       	dec	r20
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <GPIO_setupPinDirection+0x122>
     2a8:	26 2b       	or	r18, r22
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
			} else {
				CLEAR_BIT(DDRC, pin_num);
			}
			break;
     2ae:	44 c0       	rjmp	.+136    	; 0x338 <GPIO_setupPinDirection+0x1ba>
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
				SET_BIT(DDRC, pin_num);
			} else {
				CLEAR_BIT(DDRC, pin_num);
     2b0:	84 e3       	ldi	r24, 0x34	; 52
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	24 e3       	ldi	r18, 0x34	; 52
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	f9 01       	movw	r30, r18
     2ba:	20 81       	ld	r18, Z
     2bc:	62 2f       	mov	r22, r18
     2be:	2a 81       	ldd	r18, Y+2	; 0x02
     2c0:	42 2f       	mov	r20, r18
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	21 e0       	ldi	r18, 0x01	; 1
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <GPIO_setupPinDirection+0x150>
     2ca:	22 0f       	add	r18, r18
     2cc:	33 1f       	adc	r19, r19
     2ce:	4a 95       	dec	r20
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <GPIO_setupPinDirection+0x14c>
     2d2:	20 95       	com	r18
     2d4:	26 23       	and	r18, r22
     2d6:	fc 01       	movw	r30, r24
     2d8:	20 83       	st	Z, r18
			}
			break;
     2da:	2e c0       	rjmp	.+92     	; 0x338 <GPIO_setupPinDirection+0x1ba>
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	a9 f4       	brne	.+42     	; 0x30c <GPIO_setupPinDirection+0x18e>
				SET_BIT(DDRD, pin_num);
     2e2:	81 e3       	ldi	r24, 0x31	; 49
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	21 e3       	ldi	r18, 0x31	; 49
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	f9 01       	movw	r30, r18
     2ec:	20 81       	ld	r18, Z
     2ee:	62 2f       	mov	r22, r18
     2f0:	2a 81       	ldd	r18, Y+2	; 0x02
     2f2:	42 2f       	mov	r20, r18
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	21 e0       	ldi	r18, 0x01	; 1
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_setupPinDirection+0x182>
     2fc:	22 0f       	add	r18, r18
     2fe:	33 1f       	adc	r19, r19
     300:	4a 95       	dec	r20
     302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_setupPinDirection+0x17e>
     304:	26 2b       	or	r18, r22
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
			} else {
				CLEAR_BIT(DDRD, pin_num);
			}
			break;
     30a:	15 c0       	rjmp	.+42     	; 0x336 <GPIO_setupPinDirection+0x1b8>
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
				SET_BIT(DDRD, pin_num);
			} else {
				CLEAR_BIT(DDRD, pin_num);
     30c:	81 e3       	ldi	r24, 0x31	; 49
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	21 e3       	ldi	r18, 0x31	; 49
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	f9 01       	movw	r30, r18
     316:	20 81       	ld	r18, Z
     318:	62 2f       	mov	r22, r18
     31a:	2a 81       	ldd	r18, Y+2	; 0x02
     31c:	42 2f       	mov	r20, r18
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	21 e0       	ldi	r18, 0x01	; 1
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <GPIO_setupPinDirection+0x1ac>
     326:	22 0f       	add	r18, r18
     328:	33 1f       	adc	r19, r19
     32a:	4a 95       	dec	r20
     32c:	e2 f7       	brpl	.-8      	; 0x326 <GPIO_setupPinDirection+0x1a8>
     32e:	20 95       	com	r18
     330:	26 23       	and	r18, r22
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
			}
			break;
     336:	00 00       	nop
		}
	}
}
     338:	00 00       	nop
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <GPIO_writePin+0x6>
     34c:	1f 92       	push	r1
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	89 83       	std	Y+1, r24	; 0x01
     354:	6a 83       	std	Y+2, r22	; 0x02
     356:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	88 30       	cpi	r24, 0x08	; 8
     35c:	08 f0       	brcs	.+2      	; 0x360 <GPIO_writePin+0x1a>
     35e:	d0 c0       	rjmp	.+416    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	84 30       	cpi	r24, 0x04	; 4
     364:	08 f0       	brcs	.+2      	; 0x368 <GPIO_writePin+0x22>
     366:	cc c0       	rjmp	.+408    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		/* Do Nothing */
	} else {
		/* putting the port value as required */
		switch (port_num) {
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	91 05       	cpc	r25, r1
     372:	e1 f1       	breq	.+120    	; 0x3ec <GPIO_writePin+0xa6>
     374:	82 30       	cpi	r24, 0x02	; 2
     376:	91 05       	cpc	r25, r1
     378:	1c f4       	brge	.+6      	; 0x380 <GPIO_writePin+0x3a>
     37a:	89 2b       	or	r24, r25
     37c:	49 f0       	breq	.+18     	; 0x390 <GPIO_writePin+0x4a>
				SET_BIT(PORTD, pin_num);
			break;
		}
	}

}
     37e:	c0 c0       	rjmp	.+384    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
		/* Do Nothing */
	} else {
		/* putting the port value as required */
		switch (port_num) {
     380:	82 30       	cpi	r24, 0x02	; 2
     382:	91 05       	cpc	r25, r1
     384:	09 f4       	brne	.+2      	; 0x388 <GPIO_writePin+0x42>
     386:	60 c0       	rjmp	.+192    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     388:	03 97       	sbiw	r24, 0x03	; 3
     38a:	09 f4       	brne	.+2      	; 0x38e <GPIO_writePin+0x48>
     38c:	8b c0       	rjmp	.+278    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				SET_BIT(PORTD, pin_num);
			break;
		}
	}

}
     38e:	b8 c0       	rjmp	.+368    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		/* Do Nothing */
	} else {
		/* putting the port value as required */
		switch (port_num) {
		case PORTA_ID:
			if (value == 0)
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	88 23       	and	r24, r24
     394:	b1 f4       	brne	.+44     	; 0x3c2 <GPIO_writePin+0x7c>
				CLEAR_BIT(PORTA, pin_num);
     396:	8b e3       	ldi	r24, 0x3B	; 59
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2b e3       	ldi	r18, 0x3B	; 59
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	62 2f       	mov	r22, r18
     3a4:	2a 81       	ldd	r18, Y+2	; 0x02
     3a6:	42 2f       	mov	r20, r18
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	21 e0       	ldi	r18, 0x01	; 1
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <GPIO_writePin+0x6e>
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	4a 95       	dec	r20
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <GPIO_writePin+0x6a>
     3b8:	20 95       	com	r18
     3ba:	26 23       	and	r18, r22
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
			else
				SET_BIT(PORTA, pin_num);
			break;
     3c0:	9f c0       	rjmp	.+318    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		switch (port_num) {
		case PORTA_ID:
			if (value == 0)
				CLEAR_BIT(PORTA, pin_num);
			else
				SET_BIT(PORTA, pin_num);
     3c2:	8b e3       	ldi	r24, 0x3B	; 59
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	2b e3       	ldi	r18, 0x3B	; 59
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	62 2f       	mov	r22, r18
     3d0:	2a 81       	ldd	r18, Y+2	; 0x02
     3d2:	42 2f       	mov	r20, r18
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	21 e0       	ldi	r18, 0x01	; 1
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <GPIO_writePin+0x9a>
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	4a 95       	dec	r20
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <GPIO_writePin+0x96>
     3e4:	26 2b       	or	r18, r22
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
			break;
     3ea:	8a c0       	rjmp	.+276    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		case PORTB_ID:
			if (value == 0)
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	88 23       	and	r24, r24
     3f0:	b1 f4       	brne	.+44     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				CLEAR_BIT(PORTB, pin_num);
     3f2:	88 e3       	ldi	r24, 0x38	; 56
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	28 e3       	ldi	r18, 0x38	; 56
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	f9 01       	movw	r30, r18
     3fc:	20 81       	ld	r18, Z
     3fe:	62 2f       	mov	r22, r18
     400:	2a 81       	ldd	r18, Y+2	; 0x02
     402:	42 2f       	mov	r20, r18
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	4a 95       	dec	r20
     412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     414:	20 95       	com	r18
     416:	26 23       	and	r18, r22
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
			else
				SET_BIT(PORTB, pin_num);
			break;
     41c:	71 c0       	rjmp	.+226    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
			break;
		case PORTB_ID:
			if (value == 0)
				CLEAR_BIT(PORTB, pin_num);
			else
				SET_BIT(PORTB, pin_num);
     41e:	88 e3       	ldi	r24, 0x38	; 56
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	28 e3       	ldi	r18, 0x38	; 56
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	62 2f       	mov	r22, r18
     42c:	2a 81       	ldd	r18, Y+2	; 0x02
     42e:	42 2f       	mov	r20, r18
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	4a 95       	dec	r20
     43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     440:	26 2b       	or	r18, r22
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
			break;
     446:	5c c0       	rjmp	.+184    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		case PORTC_ID:
			if (value == 0)
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	88 23       	and	r24, r24
     44c:	b1 f4       	brne	.+44     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				CLEAR_BIT(PORTC, pin_num);
     44e:	85 e3       	ldi	r24, 0x35	; 53
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	25 e3       	ldi	r18, 0x35	; 53
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	20 81       	ld	r18, Z
     45a:	62 2f       	mov	r22, r18
     45c:	2a 81       	ldd	r18, Y+2	; 0x02
     45e:	42 2f       	mov	r20, r18
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	21 e0       	ldi	r18, 0x01	; 1
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     468:	22 0f       	add	r18, r18
     46a:	33 1f       	adc	r19, r19
     46c:	4a 95       	dec	r20
     46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     470:	20 95       	com	r18
     472:	26 23       	and	r18, r22
     474:	fc 01       	movw	r30, r24
     476:	20 83       	st	Z, r18
			else
				SET_BIT(PORTC, pin_num);
			break;
     478:	43 c0       	rjmp	.+134    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
			break;
		case PORTC_ID:
			if (value == 0)
				CLEAR_BIT(PORTC, pin_num);
			else
				SET_BIT(PORTC, pin_num);
     47a:	85 e3       	ldi	r24, 0x35	; 53
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	25 e3       	ldi	r18, 0x35	; 53
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	62 2f       	mov	r22, r18
     488:	2a 81       	ldd	r18, Y+2	; 0x02
     48a:	42 2f       	mov	r20, r18
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	4a 95       	dec	r20
     49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     49c:	26 2b       	or	r18, r22
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			break;
     4a2:	2e c0       	rjmp	.+92     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		case PORTD_ID:
			if (value == 0)
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	88 23       	and	r24, r24
     4a8:	b1 f4       	brne	.+44     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
				CLEAR_BIT(PORTD, pin_num);
     4aa:	82 e3       	ldi	r24, 0x32	; 50
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	22 e3       	ldi	r18, 0x32	; 50
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	62 2f       	mov	r22, r18
     4b8:	2a 81       	ldd	r18, Y+2	; 0x02
     4ba:	42 2f       	mov	r20, r18
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	4a 95       	dec	r20
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4cc:	20 95       	com	r18
     4ce:	26 23       	and	r18, r22
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
			else
				SET_BIT(PORTD, pin_num);
			break;
     4d4:	14 c0       	rjmp	.+40     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
			break;
		case PORTD_ID:
			if (value == 0)
				CLEAR_BIT(PORTD, pin_num);
			else
				SET_BIT(PORTD, pin_num);
     4d6:	82 e3       	ldi	r24, 0x32	; 50
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	22 e3       	ldi	r18, 0x32	; 50
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	62 2f       	mov	r22, r18
     4e4:	2a 81       	ldd	r18, Y+2	; 0x02
     4e6:	42 2f       	mov	r20, r18
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4f0:	22 0f       	add	r18, r18
     4f2:	33 1f       	adc	r19, r19
     4f4:	4a 95       	dec	r20
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
     4f8:	26 2b       	or	r18, r22
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
			break;
     4fe:	00 00       	nop
		}
	}

}
     500:	00 00       	nop
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <GPIO_readPin+0x6>
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	88 30       	cpi	r24, 0x08	; 8
     520:	18 f4       	brcc	.+6      	; 0x528 <GPIO_readPin+0x1a>
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	84 30       	cpi	r24, 0x04	; 4
     526:	10 f0       	brcs	.+4      	; 0x52c <GPIO_readPin+0x1e>
		return LOGIC_LOW;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	52 c0       	rjmp	.+164    	; 0x5d0 <GPIO_readPin+0xc2>
	} else {
		/* getting the required pin value */
		switch (port_num) {
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	91 05       	cpc	r25, r1
     536:	e1 f0       	breq	.+56     	; 0x570 <GPIO_readPin+0x62>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	91 05       	cpc	r25, r1
     53c:	1c f4       	brge	.+6      	; 0x544 <GPIO_readPin+0x36>
     53e:	89 2b       	or	r24, r25
     540:	39 f0       	breq	.+14     	; 0x550 <GPIO_readPin+0x42>
     542:	46 c0       	rjmp	.+140    	; 0x5d0 <GPIO_readPin+0xc2>
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	91 05       	cpc	r25, r1
     548:	19 f1       	breq	.+70     	; 0x590 <GPIO_readPin+0x82>
     54a:	03 97       	sbiw	r24, 0x03	; 3
     54c:	89 f1       	breq	.+98     	; 0x5b0 <GPIO_readPin+0xa2>
     54e:	40 c0       	rjmp	.+128    	; 0x5d0 <GPIO_readPin+0xc2>
		case PORTA_ID:
			return BIT_IS_SET(PINA, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     550:	89 e3       	ldi	r24, 0x39	; 57
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	88 2f       	mov	r24, r24
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	2a 81       	ldd	r18, Y+2	; 0x02
     55e:	22 2f       	mov	r18, r18
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <GPIO_readPin+0x5a>
     564:	95 95       	asr	r25
     566:	87 95       	ror	r24
     568:	2a 95       	dec	r18
     56a:	e2 f7       	brpl	.-8      	; 0x564 <GPIO_readPin+0x56>
     56c:	81 70       	andi	r24, 0x01	; 1
     56e:	30 c0       	rjmp	.+96     	; 0x5d0 <GPIO_readPin+0xc2>
			break;
		case PORTB_ID:
			return BIT_IS_SET(PINB, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     570:	86 e3       	ldi	r24, 0x36	; 54
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	fc 01       	movw	r30, r24
     576:	80 81       	ld	r24, Z
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	2a 81       	ldd	r18, Y+2	; 0x02
     57e:	22 2f       	mov	r18, r18
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	02 c0       	rjmp	.+4      	; 0x588 <GPIO_readPin+0x7a>
     584:	95 95       	asr	r25
     586:	87 95       	ror	r24
     588:	2a 95       	dec	r18
     58a:	e2 f7       	brpl	.-8      	; 0x584 <GPIO_readPin+0x76>
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	20 c0       	rjmp	.+64     	; 0x5d0 <GPIO_readPin+0xc2>
			break;
		case PORTC_ID:
			return BIT_IS_SET(PINC, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     590:	83 e3       	ldi	r24, 0x33	; 51
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	80 81       	ld	r24, Z
     598:	88 2f       	mov	r24, r24
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	2a 81       	ldd	r18, Y+2	; 0x02
     59e:	22 2f       	mov	r18, r18
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <GPIO_readPin+0x9a>
     5a4:	95 95       	asr	r25
     5a6:	87 95       	ror	r24
     5a8:	2a 95       	dec	r18
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <GPIO_readPin+0x96>
     5ac:	81 70       	andi	r24, 0x01	; 1
     5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <GPIO_readPin+0xc2>
			break;
		case PORTD_ID:
			return BIT_IS_SET(PIND, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     5b0:	80 e3       	ldi	r24, 0x30	; 48
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	22 2f       	mov	r18, r18
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <GPIO_readPin+0xba>
     5c4:	95 95       	asr	r25
     5c6:	87 95       	ror	r24
     5c8:	2a 95       	dec	r18
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <GPIO_readPin+0xb6>
     5cc:	81 70       	andi	r24, 0x01	; 1
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <GPIO_readPin+0xc2>
			break;
		}
	}
}
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <GPIO_setupPortDirection+0x6>
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	84 30       	cpi	r24, 0x04	; 4
     5ec:	50 f5       	brcc	.+84     	; 0x642 <GPIO_setupPortDirection+0x68>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	91 05       	cpc	r25, r1
     5f8:	91 f0       	breq	.+36     	; 0x61e <GPIO_setupPortDirection+0x44>
     5fa:	82 30       	cpi	r24, 0x02	; 2
     5fc:	91 05       	cpc	r25, r1
     5fe:	1c f4       	brge	.+6      	; 0x606 <GPIO_setupPortDirection+0x2c>
     600:	89 2b       	or	r24, r25
     602:	39 f0       	breq	.+14     	; 0x612 <GPIO_setupPortDirection+0x38>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     604:	1e c0       	rjmp	.+60     	; 0x642 <GPIO_setupPortDirection+0x68>
	 */
	if (port_num >= NUM_OF_PORTS) {
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	91 05       	cpc	r25, r1
     60a:	79 f0       	breq	.+30     	; 0x62a <GPIO_setupPortDirection+0x50>
     60c:	03 97       	sbiw	r24, 0x03	; 3
     60e:	99 f0       	breq	.+38     	; 0x636 <GPIO_setupPortDirection+0x5c>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     610:	18 c0       	rjmp	.+48     	; 0x642 <GPIO_setupPortDirection+0x68>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
		case PORTA_ID:
			DDRA = direction;
     612:	8a e3       	ldi	r24, 0x3A	; 58
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2a 81       	ldd	r18, Y+2	; 0x02
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
			break;
     61c:	12 c0       	rjmp	.+36     	; 0x642 <GPIO_setupPortDirection+0x68>
		case PORTB_ID:
			DDRB = direction;
     61e:	87 e3       	ldi	r24, 0x37	; 55
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2a 81       	ldd	r18, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
			break;
     628:	0c c0       	rjmp	.+24     	; 0x642 <GPIO_setupPortDirection+0x68>
		case PORTC_ID:
			DDRC = direction;
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2a 81       	ldd	r18, Y+2	; 0x02
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
			break;
     634:	06 c0       	rjmp	.+12     	; 0x642 <GPIO_setupPortDirection+0x68>
		case PORTD_ID:
			DDRD = direction;
     636:	81 e3       	ldi	r24, 0x31	; 49
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2a 81       	ldd	r18, Y+2	; 0x02
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18
			break;
     640:	00 00       	nop
		}
	}
}
     642:	00 00       	nop
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	00 d0       	rcall	.+0      	; 0x654 <GPIO_writePort+0x6>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	84 30       	cpi	r24, 0x04	; 4
     660:	50 f5       	brcc	.+84     	; 0x6b6 <GPIO_writePort+0x68>
		/* Do Nothing */
	} else {
		/* Write the required port as required */
		switch (port_num) {
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	91 05       	cpc	r25, r1
     66c:	91 f0       	breq	.+36     	; 0x692 <GPIO_writePort+0x44>
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	91 05       	cpc	r25, r1
     672:	1c f4       	brge	.+6      	; 0x67a <GPIO_writePort+0x2c>
     674:	89 2b       	or	r24, r25
     676:	39 f0       	breq	.+14     	; 0x686 <GPIO_writePort+0x38>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     678:	1e c0       	rjmp	.+60     	; 0x6b6 <GPIO_writePort+0x68>
	 */
	if (port_num >= NUM_OF_PORTS) {
		/* Do Nothing */
	} else {
		/* Write the required port as required */
		switch (port_num) {
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	91 05       	cpc	r25, r1
     67e:	79 f0       	breq	.+30     	; 0x69e <GPIO_writePort+0x50>
     680:	03 97       	sbiw	r24, 0x03	; 3
     682:	99 f0       	breq	.+38     	; 0x6aa <GPIO_writePort+0x5c>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     684:	18 c0       	rjmp	.+48     	; 0x6b6 <GPIO_writePort+0x68>
		/* Do Nothing */
	} else {
		/* Write the required port as required */
		switch (port_num) {
		case PORTA_ID:
			PORTA = value;
     686:	8b e3       	ldi	r24, 0x3B	; 59
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2a 81       	ldd	r18, Y+2	; 0x02
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
			break;
     690:	12 c0       	rjmp	.+36     	; 0x6b6 <GPIO_writePort+0x68>
		case PORTB_ID:
			PORTB = value;
     692:	88 e3       	ldi	r24, 0x38	; 56
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	2a 81       	ldd	r18, Y+2	; 0x02
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
			break;
     69c:	0c c0       	rjmp	.+24     	; 0x6b6 <GPIO_writePort+0x68>
		case PORTC_ID:
			PORTC = value;
     69e:	85 e3       	ldi	r24, 0x35	; 53
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	2a 81       	ldd	r18, Y+2	; 0x02
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
			break;
     6a8:	06 c0       	rjmp	.+12     	; 0x6b6 <GPIO_writePort+0x68>
		case PORTD_ID:
			PORTD = value;
     6aa:	82 e3       	ldi	r24, 0x32	; 50
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2a 81       	ldd	r18, Y+2	; 0x02
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
			break;
     6b4:	00 00       	nop
		}
	}
}
     6b6:	00 00       	nop
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	1f 92       	push	r1
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	84 30       	cpi	r24, 0x04	; 4
     6d2:	10 f0       	brcs	.+4      	; 0x6d8 <GPIO_readPort+0x16>
		return 0; // if the port does not exist
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	26 c0       	rjmp	.+76     	; 0x724 <GPIO_readPort+0x62>
	} else {
		/* Get the required pin */
		switch (port_num) {
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	91 05       	cpc	r25, r1
     6e2:	89 f0       	breq	.+34     	; 0x706 <GPIO_readPort+0x44>
     6e4:	82 30       	cpi	r24, 0x02	; 2
     6e6:	91 05       	cpc	r25, r1
     6e8:	1c f4       	brge	.+6      	; 0x6f0 <GPIO_readPort+0x2e>
     6ea:	89 2b       	or	r24, r25
     6ec:	39 f0       	breq	.+14     	; 0x6fc <GPIO_readPort+0x3a>
     6ee:	1a c0       	rjmp	.+52     	; 0x724 <GPIO_readPort+0x62>
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	91 05       	cpc	r25, r1
     6f4:	69 f0       	breq	.+26     	; 0x710 <GPIO_readPort+0x4e>
     6f6:	03 97       	sbiw	r24, 0x03	; 3
     6f8:	81 f0       	breq	.+32     	; 0x71a <GPIO_readPort+0x58>
     6fa:	14 c0       	rjmp	.+40     	; 0x724 <GPIO_readPort+0x62>
		case PORTA_ID:
			return PINA;
     6fc:	89 e3       	ldi	r24, 0x39	; 57
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	fc 01       	movw	r30, r24
     702:	80 81       	ld	r24, Z
     704:	0f c0       	rjmp	.+30     	; 0x724 <GPIO_readPort+0x62>
			break;
		case PORTB_ID:
			return PINB;
     706:	86 e3       	ldi	r24, 0x36	; 54
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	80 81       	ld	r24, Z
     70e:	0a c0       	rjmp	.+20     	; 0x724 <GPIO_readPort+0x62>
			break;
		case PORTC_ID:
			return PINC;
     710:	83 e3       	ldi	r24, 0x33	; 51
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	fc 01       	movw	r30, r24
     716:	80 81       	ld	r24, Z
     718:	05 c0       	rjmp	.+10     	; 0x724 <GPIO_readPort+0x62>
			break;
		case PORTD_ID:
			return PIND;
     71a:	80 e3       	ldi	r24, 0x30	; 48
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	00 c0       	rjmp	.+0      	; 0x724 <GPIO_readPort+0x62>
			break;
		}
	}
}
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <GPIO_togglePin>:


uint8 GPIO_togglePin(uint8 port_num, uint8 pin_num){
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <GPIO_togglePin+0x6>
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	6a 83       	std	Y+2, r22	; 0x02
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	88 30       	cpi	r24, 0x08	; 8
     73e:	08 f0       	brcs	.+2      	; 0x742 <GPIO_togglePin+0x16>
     740:	6b c0       	rjmp	.+214    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	84 30       	cpi	r24, 0x04	; 4
     746:	08 f0       	brcs	.+2      	; 0x74a <GPIO_togglePin+0x1e>
     748:	67 c0       	rjmp	.+206    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
			/*Do nothing*/
		} else {
			/* getting the required pin value */
			switch (port_num) {
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	91 05       	cpc	r25, r1
     754:	11 f1       	breq	.+68     	; 0x79a <GPIO_togglePin+0x6e>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	91 05       	cpc	r25, r1
     75a:	1c f4       	brge	.+6      	; 0x762 <GPIO_togglePin+0x36>
     75c:	89 2b       	or	r24, r25
     75e:	41 f0       	breq	.+16     	; 0x770 <GPIO_togglePin+0x44>
     760:	5b c0       	rjmp	.+182    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	91 05       	cpc	r25, r1
     766:	71 f1       	breq	.+92     	; 0x7c4 <GPIO_togglePin+0x98>
     768:	03 97       	sbiw	r24, 0x03	; 3
     76a:	09 f4       	brne	.+2      	; 0x76e <GPIO_togglePin+0x42>
     76c:	40 c0       	rjmp	.+128    	; 0x7ee <GPIO_togglePin+0xc2>
     76e:	54 c0       	rjmp	.+168    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
			case PORTA_ID:
				return TOGGLE_BIT(PORTA,pin_num);
     770:	2b e3       	ldi	r18, 0x3B	; 59
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	8b e3       	ldi	r24, 0x3B	; 59
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
     77c:	68 2f       	mov	r22, r24
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	48 2f       	mov	r20, r24
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 c0       	rjmp	.+4      	; 0x78e <GPIO_togglePin+0x62>
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	4a 95       	dec	r20
     790:	e2 f7       	brpl	.-8      	; 0x78a <GPIO_togglePin+0x5e>
     792:	86 27       	eor	r24, r22
     794:	f9 01       	movw	r30, r18
     796:	80 83       	st	Z, r24
     798:	3f c0       	rjmp	.+126    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				break;
			case PORTB_ID:
				return TOGGLE_BIT(PORTB,pin_num);
     79a:	28 e3       	ldi	r18, 0x38	; 56
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	88 e3       	ldi	r24, 0x38	; 56
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	fc 01       	movw	r30, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	68 2f       	mov	r22, r24
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	48 2f       	mov	r20, r24
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <GPIO_togglePin+0x8c>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	4a 95       	dec	r20
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <GPIO_togglePin+0x88>
     7bc:	86 27       	eor	r24, r22
     7be:	f9 01       	movw	r30, r18
     7c0:	80 83       	st	Z, r24
     7c2:	2a c0       	rjmp	.+84     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				break;
			case PORTC_ID:
				return TOGGLE_BIT(PORTC,pin_num);
     7c4:	25 e3       	ldi	r18, 0x35	; 53
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	85 e3       	ldi	r24, 0x35	; 53
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	68 2f       	mov	r22, r24
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	48 2f       	mov	r20, r24
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <GPIO_togglePin+0xb6>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	4a 95       	dec	r20
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <GPIO_togglePin+0xb2>
     7e6:	86 27       	eor	r24, r22
     7e8:	f9 01       	movw	r30, r18
     7ea:	80 83       	st	Z, r24
     7ec:	15 c0       	rjmp	.+42     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				break;
			case PORTD_ID:
				return TOGGLE_BIT(PORTD,pin_num);
     7ee:	22 e3       	ldi	r18, 0x32	; 50
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	82 e3       	ldi	r24, 0x32	; 50
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	68 2f       	mov	r22, r24
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	48 2f       	mov	r20, r24
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	4a 95       	dec	r20
     80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     810:	86 27       	eor	r24, r22
     812:	f9 01       	movw	r30, r18
     814:	80 83       	st	Z, r24
     816:	00 c0       	rjmp	.+0      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				break;
			}
		}
}
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <Eta32mini_SevenSegment_Display>:
#include "util/delay.h"
/*
 * Description:
 * takes a digit and display it on one of the seven segs
 */
static void Eta32mini_SevenSegment_Display(unsigned char value) {
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	1f 92       	push	r1
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	89 83       	std	Y+1, r24	; 0x01
	switch (value) {
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	88 2f       	mov	r24, r24
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	09 2e       	mov	r0, r25
     836:	00 0c       	add	r0, r0
     838:	aa 0b       	sbc	r26, r26
     83a:	bb 0b       	sbc	r27, r27
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	29 e0       	ldi	r18, 0x09	; 9
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	84 1b       	sub	r24, r20
     846:	95 0b       	sbc	r25, r21
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	08 f4       	brcc	.+2      	; 0x850 <Eta32mini_SevenSegment_Display+0x2e>
     84e:	6d c1       	rjmp	.+730    	; 0xb2a <__stack+0x2cb>
     850:	86 5d       	subi	r24, 0xD6	; 214
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	fc 01       	movw	r30, r24
     856:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__tablejump2__>
	case 0:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	63 e0       	ldi	r22, 0x03	; 3
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     878:	41 e0       	ldi	r20, 0x01	; 1
     87a:	64 e0       	ldi	r22, 0x04	; 4
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	65 e0       	ldi	r22, 0x05	; 5
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	66 e0       	ldi	r22, 0x06	; 6
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	67 e0       	ldi	r22, 0x07	; 7
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		break;
     8a0:	44 c1       	rjmp	.+648    	; 0xb2a <__stack+0x2cb>
	case 1:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_LOW);
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     8ac:	41 e0       	ldi	r20, 0x01	; 1
     8ae:	62 e0       	ldi	r22, 0x02	; 2
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	63 e0       	ldi	r22, 0x03	; 3
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	64 e0       	ldi	r22, 0x04	; 4
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	65 e0       	ldi	r22, 0x05	; 5
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	66 e0       	ldi	r22, 0x06	; 6
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	67 e0       	ldi	r22, 0x07	; 7
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);

		break;
     8e8:	20 c1       	rjmp	.+576    	; 0xb2a <__stack+0x2cb>
	case 2:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	63 e0       	ldi	r22, 0x03	; 3
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	64 e0       	ldi	r22, 0x04	; 4
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     912:	41 e0       	ldi	r20, 0x01	; 1
     914:	65 e0       	ldi	r22, 0x05	; 5
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	66 e0       	ldi	r22, 0x06	; 6
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	67 e0       	ldi	r22, 0x07	; 7
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);

		break;
     930:	fc c0       	rjmp	.+504    	; 0xb2a <__stack+0x2cb>
	case 3:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	62 e0       	ldi	r22, 0x02	; 2
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	63 e0       	ldi	r22, 0x03	; 3
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	64 e0       	ldi	r22, 0x04	; 4
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	65 e0       	ldi	r22, 0x05	; 5
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	66 e0       	ldi	r22, 0x06	; 6
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     96e:	41 e0       	ldi	r20, 0x01	; 1
     970:	67 e0       	ldi	r22, 0x07	; 7
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);

		break;
     978:	d8 c0       	rjmp	.+432    	; 0xb2a <__stack+0x2cb>
	case 4:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_LOW);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	62 e0       	ldi	r22, 0x02	; 2
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	63 e0       	ldi	r22, 0x03	; 3
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	64 e0       	ldi	r22, 0x04	; 4
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	65 e0       	ldi	r22, 0x05	; 5
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	66 e0       	ldi	r22, 0x06	; 6
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     9b6:	41 e0       	ldi	r20, 0x01	; 1
     9b8:	67 e0       	ldi	r22, 0x07	; 7
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		break;
     9c0:	b4 c0       	rjmp	.+360    	; 0xb2a <__stack+0x2cb>
	case 5:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	62 e0       	ldi	r22, 0x02	; 2
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	63 e0       	ldi	r22, 0x03	; 3
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	64 e0       	ldi	r22, 0x04	; 4
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	65 e0       	ldi	r22, 0x05	; 5
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	66 e0       	ldi	r22, 0x06	; 6
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	67 e0       	ldi	r22, 0x07	; 7
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);

		break;
     a08:	90 c0       	rjmp	.+288    	; 0xb2a <__stack+0x2cb>
	case 6:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	63 e0       	ldi	r22, 0x03	; 3
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	64 e0       	ldi	r22, 0x04	; 4
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	65 e0       	ldi	r22, 0x05	; 5
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	66 e0       	ldi	r22, 0x06	; 6
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	67 e0       	ldi	r22, 0x07	; 7
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		break;
     a50:	6c c0       	rjmp	.+216    	; 0xb2a <__stack+0x2cb>
	case 7:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     a5c:	41 e0       	ldi	r20, 0x01	; 1
     a5e:	62 e0       	ldi	r22, 0x02	; 2
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     a66:	41 e0       	ldi	r20, 0x01	; 1
     a68:	63 e0       	ldi	r22, 0x03	; 3
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	65 e0       	ldi	r22, 0x05	; 5
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	66 e0       	ldi	r22, 0x06	; 6
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);

		break;
     a98:	48 c0       	rjmp	.+144    	; 0xb2a <__stack+0x2cb>
	case 8:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	62 e0       	ldi	r22, 0x02	; 2
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     aae:	41 e0       	ldi	r20, 0x01	; 1
     ab0:	63 e0       	ldi	r22, 0x03	; 3
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	64 e0       	ldi	r22, 0x04	; 4
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	65 e0       	ldi	r22, 0x05	; 5
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     ad6:	41 e0       	ldi	r20, 0x01	; 1
     ad8:	67 e0       	ldi	r22, 0x07	; 7
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		break;
     ae0:	24 c0       	rjmp	.+72     	; 0xb2a <__stack+0x2cb>
	case 9:
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN, LOGIC_HIGH);
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 1,
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	62 e0       	ldi	r22, 0x02	; 2
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 2,
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	63 e0       	ldi	r22, 0x03	; 3
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 3,
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	64 e0       	ldi	r22, 0x04	; 4
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 4,
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	65 e0       	ldi	r22, 0x05	; 5
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_LOW);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 5,
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	66 e0       	ldi	r22, 0x06	; 6
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		GPIO_writePin(SEVEN_SEG_OUTPUT_PORT, SEVEN_SEG_START_PIN + 6,
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	67 e0       	ldi	r22, 0x07	; 7
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
		LOGIC_HIGH);
		break;
     b28:	00 00       	nop
	}
}
     b2a:	00 00       	nop
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <MULTIPLEXED7SEG_displayNumber>:
 * Description:
 * The functions displays the output on the seven segement
 * the maximum number to display is 99
 */

void MULTIPLEXED7SEG_displayNumber(uint8 num) {
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	6d 97       	sbiw	r28, 0x1d	; 29
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_togglePin(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN);
     b4a:	66 e0       	ldi	r22, 0x06	; 6
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 96 03 	call	0x72c	; 0x72c <GPIO_togglePin>
	GPIO_togglePin(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN + 1);
     b52:	67 e0       	ldi	r22, 0x07	; 7
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	0e 94 96 03 	call	0x72c	; 0x72c <GPIO_togglePin>
	Eta32mini_SevenSegment_Display(num / 10);
     b5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b5c:	8d ec       	ldi	r24, 0xCD	; 205
     b5e:	98 9f       	mul	r25, r24
     b60:	81 2d       	mov	r24, r1
     b62:	11 24       	eor	r1, r1
     b64:	86 95       	lsr	r24
     b66:	86 95       	lsr	r24
     b68:	86 95       	lsr	r24
     b6a:	0e 94 11 04 	call	0x822	; 0x822 <Eta32mini_SevenSegment_Display>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	a0 e7       	ldi	r26, 0x70	; 112
     b74:	b2 e4       	ldi	r27, 0x42	; 66
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	ab 83       	std	Y+3, r26	; 0x03
     b7c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4a e7       	ldi	r20, 0x7A	; 122
     b84:	53 e4       	ldi	r21, 0x43	; 67
     b86:	69 81       	ldd	r22, Y+1	; 0x01
     b88:	7a 81       	ldd	r23, Y+2	; 0x02
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	0e 94 89 07 	call	0xf12	; 0xf12 <__mulsf3>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	8b 8b       	std	Y+19, r24	; 0x13
     b98:	9c 8b       	std	Y+20, r25	; 0x14
     b9a:	ad 8b       	std	Y+21, r26	; 0x15
     b9c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	6b 89       	ldd	r22, Y+19	; 0x13
     ba8:	7c 89       	ldd	r23, Y+20	; 0x14
     baa:	8d 89       	ldd	r24, Y+21	; 0x15
     bac:	9e 89       	ldd	r25, Y+22	; 0x16
     bae:	0e 94 03 07 	call	0xe06	; 0xe06 <__cmpsf2>
     bb2:	88 23       	and	r24, r24
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <MULTIPLEXED7SEG_displayNumber+0x8c>
		__ticks = 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	98 8f       	std	Y+24, r25	; 0x18
     bbc:	8f 8b       	std	Y+23, r24	; 0x17
     bbe:	3f c0       	rjmp	.+126    	; 0xc3e <MULTIPLEXED7SEG_displayNumber+0x10a>
	else if (__tmp > 65535)
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	6b 89       	ldd	r22, Y+19	; 0x13
     bca:	7c 89       	ldd	r23, Y+20	; 0x14
     bcc:	8d 89       	ldd	r24, Y+21	; 0x15
     bce:	9e 89       	ldd	r25, Y+22	; 0x16
     bd0:	0e 94 84 07 	call	0xf08	; 0xf08 <__gesf2>
     bd4:	18 16       	cp	r1, r24
     bd6:	4c f5       	brge	.+82     	; 0xc2a <MULTIPLEXED7SEG_displayNumber+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	69 81       	ldd	r22, Y+1	; 0x01
     be2:	7a 81       	ldd	r23, Y+2	; 0x02
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	0e 94 89 07 	call	0xf12	; 0xf12 <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixunssfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	98 8f       	std	Y+24, r25	; 0x18
     bfe:	8f 8b       	std	Y+23, r24	; 0x17
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <MULTIPLEXED7SEG_displayNumber+0xec>
     c02:	89 e1       	ldi	r24, 0x19	; 25
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9a 8f       	std	Y+26, r25	; 0x1a
     c08:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0a:	89 8d       	ldd	r24, Y+25	; 0x19
     c0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <MULTIPLEXED7SEG_displayNumber+0xda>
     c12:	9a 8f       	std	Y+26, r25	; 0x1a
     c14:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c16:	8f 89       	ldd	r24, Y+23	; 0x17
     c18:	98 8d       	ldd	r25, Y+24	; 0x18
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	98 8f       	std	Y+24, r25	; 0x18
     c1e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c20:	8f 89       	ldd	r24, Y+23	; 0x17
     c22:	98 8d       	ldd	r25, Y+24	; 0x18
     c24:	89 2b       	or	r24, r25
     c26:	69 f7       	brne	.-38     	; 0xc02 <MULTIPLEXED7SEG_displayNumber+0xce>
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <MULTIPLEXED7SEG_displayNumber+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2a:	6b 89       	ldd	r22, Y+19	; 0x13
     c2c:	7c 89       	ldd	r23, Y+20	; 0x14
     c2e:	8d 89       	ldd	r24, Y+21	; 0x15
     c30:	9e 89       	ldd	r25, Y+22	; 0x16
     c32:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	98 8f       	std	Y+24, r25	; 0x18
     c3c:	8f 8b       	std	Y+23, r24	; 0x17
     c3e:	8f 89       	ldd	r24, Y+23	; 0x17
     c40:	98 8d       	ldd	r25, Y+24	; 0x18
     c42:	9c 8f       	std	Y+28, r25	; 0x1c
     c44:	8b 8f       	std	Y+27, r24	; 0x1b
     c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <MULTIPLEXED7SEG_displayNumber+0x116>
     c4e:	9c 8f       	std	Y+28, r25	; 0x1c
     c50:	8b 8f       	std	Y+27, r24	; 0x1b

	_delay_ms(60);
	GPIO_togglePin(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN);
     c52:	66 e0       	ldi	r22, 0x06	; 6
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	0e 94 96 03 	call	0x72c	; 0x72c <GPIO_togglePin>
	GPIO_togglePin(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN + 1);
     c5a:	67 e0       	ldi	r22, 0x07	; 7
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	0e 94 96 03 	call	0x72c	; 0x72c <GPIO_togglePin>
	Eta32mini_SevenSegment_Display(num % 10);
     c62:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c64:	8d ec       	ldi	r24, 0xCD	; 205
     c66:	98 9f       	mul	r25, r24
     c68:	81 2d       	mov	r24, r1
     c6a:	11 24       	eor	r1, r1
     c6c:	86 95       	lsr	r24
     c6e:	86 95       	lsr	r24
     c70:	86 95       	lsr	r24
     c72:	88 0f       	add	r24, r24
     c74:	28 2f       	mov	r18, r24
     c76:	22 0f       	add	r18, r18
     c78:	22 0f       	add	r18, r18
     c7a:	82 0f       	add	r24, r18
     c7c:	29 2f       	mov	r18, r25
     c7e:	28 1b       	sub	r18, r24
     c80:	82 2f       	mov	r24, r18
     c82:	0e 94 11 04 	call	0x822	; 0x822 <Eta32mini_SevenSegment_Display>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e7       	ldi	r26, 0x70	; 112
     c8c:	b2 e4       	ldi	r27, 0x42	; 66
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	9e 83       	std	Y+6, r25	; 0x06
     c92:	af 83       	std	Y+7, r26	; 0x07
     c94:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	4a e7       	ldi	r20, 0x7A	; 122
     c9c:	53 e4       	ldi	r21, 0x43	; 67
     c9e:	6d 81       	ldd	r22, Y+5	; 0x05
     ca0:	7e 81       	ldd	r23, Y+6	; 0x06
     ca2:	8f 81       	ldd	r24, Y+7	; 0x07
     ca4:	98 85       	ldd	r25, Y+8	; 0x08
     ca6:	0e 94 89 07 	call	0xf12	; 0xf12 <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	89 87       	std	Y+9, r24	; 0x09
     cb0:	9a 87       	std	Y+10, r25	; 0x0a
     cb2:	ab 87       	std	Y+11, r26	; 0x0b
     cb4:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e8       	ldi	r20, 0x80	; 128
     cbc:	5f e3       	ldi	r21, 0x3F	; 63
     cbe:	69 85       	ldd	r22, Y+9	; 0x09
     cc0:	7a 85       	ldd	r23, Y+10	; 0x0a
     cc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc6:	0e 94 03 07 	call	0xe06	; 0xe06 <__cmpsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <MULTIPLEXED7SEG_displayNumber+0x1a4>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9e 87       	std	Y+14, r25	; 0x0e
     cd4:	8d 87       	std	Y+13, r24	; 0x0d
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <MULTIPLEXED7SEG_displayNumber+0x222>
	else if (__tmp > 65535)
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	3f ef       	ldi	r19, 0xFF	; 255
     cdc:	4f e7       	ldi	r20, 0x7F	; 127
     cde:	57 e4       	ldi	r21, 0x47	; 71
     ce0:	69 85       	ldd	r22, Y+9	; 0x09
     ce2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ce4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce8:	0e 94 84 07 	call	0xf08	; 0xf08 <__gesf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <MULTIPLEXED7SEG_displayNumber+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e2       	ldi	r20, 0x20	; 32
     cf6:	51 e4       	ldi	r21, 0x41	; 65
     cf8:	6d 81       	ldd	r22, Y+5	; 0x05
     cfa:	7e 81       	ldd	r23, Y+6	; 0x06
     cfc:	8f 81       	ldd	r24, Y+7	; 0x07
     cfe:	98 85       	ldd	r25, Y+8	; 0x08
     d00:	0e 94 89 07 	call	0xf12	; 0xf12 <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9e 87       	std	Y+14, r25	; 0x0e
     d16:	8d 87       	std	Y+13, r24	; 0x0d
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <MULTIPLEXED7SEG_displayNumber+0x204>
     d1a:	89 e1       	ldi	r24, 0x19	; 25
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	98 8b       	std	Y+16, r25	; 0x10
     d20:	8f 87       	std	Y+15, r24	; 0x0f
     d22:	8f 85       	ldd	r24, Y+15	; 0x0f
     d24:	98 89       	ldd	r25, Y+16	; 0x10
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <MULTIPLEXED7SEG_displayNumber+0x1f2>
     d2a:	98 8b       	std	Y+16, r25	; 0x10
     d2c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d30:	9e 85       	ldd	r25, Y+14	; 0x0e
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	9e 87       	std	Y+14, r25	; 0x0e
     d36:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3c:	89 2b       	or	r24, r25
     d3e:	69 f7       	brne	.-38     	; 0xd1a <MULTIPLEXED7SEG_displayNumber+0x1e6>

	_delay_ms(60);

}
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <MULTIPLEXED7SEG_displayNumber+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	69 85       	ldd	r22, Y+9	; 0x09
     d44:	7a 85       	ldd	r23, Y+10	; 0x0a
     d46:	8b 85       	ldd	r24, Y+11	; 0x0b
     d48:	9c 85       	ldd	r25, Y+12	; 0x0c
     d4a:	0e 94 08 07 	call	0xe10	; 0xe10 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9e 87       	std	Y+14, r25	; 0x0e
     d54:	8d 87       	std	Y+13, r24	; 0x0d
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5a:	9a 8b       	std	Y+18, r25	; 0x12
     d5c:	89 8b       	std	Y+17, r24	; 0x11
     d5e:	89 89       	ldd	r24, Y+17	; 0x11
     d60:	9a 89       	ldd	r25, Y+18	; 0x12
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <MULTIPLEXED7SEG_displayNumber+0x22e>
     d66:	9a 8b       	std	Y+18, r25	; 0x12
     d68:	89 8b       	std	Y+17, r24	; 0x11
     d6a:	00 00       	nop
     d6c:	6d 96       	adiw	r28, 0x1d	; 29
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <MULTIPLEXED7SEG_init>:

/*
 * Description:
 * initilze the sevensegs
 */
void MULTIPLEXED7SEG_init() {
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Intializing the GPIO for the seven segements
	 */
	GPIO_setupPortDirection(SEVEN_SEG_OUTPUT_PORT, PORT_OUTPUT); 											/*declaring the seven seg port as output port */
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 ed 02 	call	0x5da	; 0x5da <GPIO_setupPortDirection>
	GPIO_setupPinDirection(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN,PIN_OUTPUT);					/*declaring the first control pin as output pin*/
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	66 e0       	ldi	r22, 0x06	; 6
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 bf 00 	call	0x17e	; 0x17e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(SEVEN_SEG_CONTROL_PORT,SEVEN_SEG_CONTROL_START_PIN + 1, PIN_OUTPUT);				/*declaring the second control pin as output pin*/
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 bf 00 	call	0x17e	; 0x17e <GPIO_setupPinDirection>
	GPIO_writePin(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN,LOGIC_HIGH);							/*initializing the first controll pin to be LOGIC_HIGH*/
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	66 e0       	ldi	r22, 0x06	; 6
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
	GPIO_writePin(SEVEN_SEG_CONTROL_PORT, SEVEN_SEG_CONTROL_START_PIN + 1,LOGIC_LOW);						/*initializing the second controll pin to be LOGIC_LOW*/
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	67 e0       	ldi	r22, 0x07	; 7
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	0e 94 a3 01 	call	0x346	; 0x346 <GPIO_writePin>
}
     db6:	00 00       	nop
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <APPLICATION_setup>:
/*
 * Description:
 * this function is reponsable to inizialize the hardware
 */

void APPLICATION_setup(){
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	MULTIPLEXED7SEG_init();
     dc6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <MULTIPLEXED7SEG_init>
}
     dca:	00 00       	nop
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <APPLICATION_loop>:
/*
 * Description:
 * this is the main loop of the application
 */

void APPLICATION_loop(){
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
	MULTIPLEXED7SEG_displayNumber(60);
     dda:	8c e3       	ldi	r24, 0x3C	; 60
     ddc:	0e 94 9a 05 	call	0xb34	; 0xb34 <MULTIPLEXED7SEG_displayNumber>
}
     de0:	00 00       	nop
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <main>:
////	GPIO_togglePin(PORTC_ID,PIN7_ID);
//	GPIO_togglePin(PORTA_ID,PIN0_ID);
//
//}

int main(void) {
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
//	TIMER2_startTimer2(1, render7Seg);
	APPLICATION_setup();
     df0:	0e 94 df 06 	call	0xdbe	; 0xdbe <APPLICATION_setup>
	while (1) {
		APPLICATION_loop();
     df4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <APPLICATION_loop>
	}
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <main+0xc>

00000dfa <__tablejump2__>:
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	05 90       	lpm	r0, Z+
     e00:	f4 91       	lpm	r31, Z
     e02:	e0 2d       	mov	r30, r0
     e04:	09 94       	ijmp

00000e06 <__cmpsf2>:
     e06:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_cmp>
     e0a:	08 f4       	brcc	.+2      	; 0xe0e <__cmpsf2+0x8>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	08 95       	ret

00000e10 <__fixunssfsi>:
     e10:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_splitA>
     e14:	88 f0       	brcs	.+34     	; 0xe38 <__fixunssfsi+0x28>
     e16:	9f 57       	subi	r25, 0x7F	; 127
     e18:	98 f0       	brcs	.+38     	; 0xe40 <__fixunssfsi+0x30>
     e1a:	b9 2f       	mov	r27, r25
     e1c:	99 27       	eor	r25, r25
     e1e:	b7 51       	subi	r27, 0x17	; 23
     e20:	b0 f0       	brcs	.+44     	; 0xe4e <__fixunssfsi+0x3e>
     e22:	e1 f0       	breq	.+56     	; 0xe5c <__fixunssfsi+0x4c>
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	1a f0       	brmi	.+6      	; 0xe34 <__fixunssfsi+0x24>
     e2e:	ba 95       	dec	r27
     e30:	c9 f7       	brne	.-14     	; 0xe24 <__fixunssfsi+0x14>
     e32:	14 c0       	rjmp	.+40     	; 0xe5c <__fixunssfsi+0x4c>
     e34:	b1 30       	cpi	r27, 0x01	; 1
     e36:	91 f0       	breq	.+36     	; 0xe5c <__fixunssfsi+0x4c>
     e38:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_zero>
     e3c:	b1 e0       	ldi	r27, 0x01	; 1
     e3e:	08 95       	ret
     e40:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_zero>
     e44:	67 2f       	mov	r22, r23
     e46:	78 2f       	mov	r23, r24
     e48:	88 27       	eor	r24, r24
     e4a:	b8 5f       	subi	r27, 0xF8	; 248
     e4c:	39 f0       	breq	.+14     	; 0xe5c <__fixunssfsi+0x4c>
     e4e:	b9 3f       	cpi	r27, 0xF9	; 249
     e50:	cc f3       	brlt	.-14     	; 0xe44 <__fixunssfsi+0x34>
     e52:	86 95       	lsr	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b3 95       	inc	r27
     e5a:	d9 f7       	brne	.-10     	; 0xe52 <__fixunssfsi+0x42>
     e5c:	3e f4       	brtc	.+14     	; 0xe6c <__fixunssfsi+0x5c>
     e5e:	90 95       	com	r25
     e60:	80 95       	com	r24
     e62:	70 95       	com	r23
     e64:	61 95       	neg	r22
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	08 95       	ret

00000e6e <__fp_cmp>:
     e6e:	99 0f       	add	r25, r25
     e70:	00 08       	sbc	r0, r0
     e72:	55 0f       	add	r21, r21
     e74:	aa 0b       	sbc	r26, r26
     e76:	e0 e8       	ldi	r30, 0x80	; 128
     e78:	fe ef       	ldi	r31, 0xFE	; 254
     e7a:	16 16       	cp	r1, r22
     e7c:	17 06       	cpc	r1, r23
     e7e:	e8 07       	cpc	r30, r24
     e80:	f9 07       	cpc	r31, r25
     e82:	c0 f0       	brcs	.+48     	; 0xeb4 <__fp_cmp+0x46>
     e84:	12 16       	cp	r1, r18
     e86:	13 06       	cpc	r1, r19
     e88:	e4 07       	cpc	r30, r20
     e8a:	f5 07       	cpc	r31, r21
     e8c:	98 f0       	brcs	.+38     	; 0xeb4 <__fp_cmp+0x46>
     e8e:	62 1b       	sub	r22, r18
     e90:	73 0b       	sbc	r23, r19
     e92:	84 0b       	sbc	r24, r20
     e94:	95 0b       	sbc	r25, r21
     e96:	39 f4       	brne	.+14     	; 0xea6 <__fp_cmp+0x38>
     e98:	0a 26       	eor	r0, r26
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <__fp_cmp+0x46>
     e9c:	23 2b       	or	r18, r19
     e9e:	24 2b       	or	r18, r20
     ea0:	25 2b       	or	r18, r21
     ea2:	21 f4       	brne	.+8      	; 0xeac <__fp_cmp+0x3e>
     ea4:	08 95       	ret
     ea6:	0a 26       	eor	r0, r26
     ea8:	09 f4       	brne	.+2      	; 0xeac <__fp_cmp+0x3e>
     eaa:	a1 40       	sbci	r26, 0x01	; 1
     eac:	a6 95       	lsr	r26
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	81 1d       	adc	r24, r1
     eb2:	81 1d       	adc	r24, r1
     eb4:	08 95       	ret

00000eb6 <__fp_split3>:
     eb6:	57 fd       	sbrc	r21, 7
     eb8:	90 58       	subi	r25, 0x80	; 128
     eba:	44 0f       	add	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	59 f0       	breq	.+22     	; 0xed6 <__fp_splitA+0x10>
     ec0:	5f 3f       	cpi	r21, 0xFF	; 255
     ec2:	71 f0       	breq	.+28     	; 0xee0 <__fp_splitA+0x1a>
     ec4:	47 95       	ror	r20

00000ec6 <__fp_splitA>:
     ec6:	88 0f       	add	r24, r24
     ec8:	97 fb       	bst	r25, 7
     eca:	99 1f       	adc	r25, r25
     ecc:	61 f0       	breq	.+24     	; 0xee6 <__fp_splitA+0x20>
     ece:	9f 3f       	cpi	r25, 0xFF	; 255
     ed0:	79 f0       	breq	.+30     	; 0xef0 <__fp_splitA+0x2a>
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret
     ed6:	12 16       	cp	r1, r18
     ed8:	13 06       	cpc	r1, r19
     eda:	14 06       	cpc	r1, r20
     edc:	55 1f       	adc	r21, r21
     ede:	f2 cf       	rjmp	.-28     	; 0xec4 <__fp_split3+0xe>
     ee0:	46 95       	lsr	r20
     ee2:	f1 df       	rcall	.-30     	; 0xec6 <__fp_splitA>
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <__fp_splitA+0x30>
     ee6:	16 16       	cp	r1, r22
     ee8:	17 06       	cpc	r1, r23
     eea:	18 06       	cpc	r1, r24
     eec:	99 1f       	adc	r25, r25
     eee:	f1 cf       	rjmp	.-30     	; 0xed2 <__fp_splitA+0xc>
     ef0:	86 95       	lsr	r24
     ef2:	71 05       	cpc	r23, r1
     ef4:	61 05       	cpc	r22, r1
     ef6:	08 94       	sec
     ef8:	08 95       	ret

00000efa <__fp_zero>:
     efa:	e8 94       	clt

00000efc <__fp_szero>:
     efc:	bb 27       	eor	r27, r27
     efe:	66 27       	eor	r22, r22
     f00:	77 27       	eor	r23, r23
     f02:	cb 01       	movw	r24, r22
     f04:	97 f9       	bld	r25, 7
     f06:	08 95       	ret

00000f08 <__gesf2>:
     f08:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_cmp>
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <__gesf2+0x8>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	08 95       	ret

00000f12 <__mulsf3>:
     f12:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3x>
     f16:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_round>
     f1a:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_pscA>
     f1e:	38 f0       	brcs	.+14     	; 0xf2e <__mulsf3+0x1c>
     f20:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_pscB>
     f24:	20 f0       	brcs	.+8      	; 0xf2e <__mulsf3+0x1c>
     f26:	95 23       	and	r25, r21
     f28:	11 f0       	breq	.+4      	; 0xf2e <__mulsf3+0x1c>
     f2a:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
     f2e:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_nan>
     f32:	11 24       	eor	r1, r1
     f34:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_szero>

00000f38 <__mulsf3x>:
     f38:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_split3>
     f3c:	70 f3       	brcs	.-36     	; 0xf1a <__mulsf3+0x8>

00000f3e <__mulsf3_pse>:
     f3e:	95 9f       	mul	r25, r21
     f40:	c1 f3       	breq	.-16     	; 0xf32 <__mulsf3+0x20>
     f42:	95 0f       	add	r25, r21
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	55 1f       	adc	r21, r21
     f48:	62 9f       	mul	r22, r18
     f4a:	f0 01       	movw	r30, r0
     f4c:	72 9f       	mul	r23, r18
     f4e:	bb 27       	eor	r27, r27
     f50:	f0 0d       	add	r31, r0
     f52:	b1 1d       	adc	r27, r1
     f54:	63 9f       	mul	r22, r19
     f56:	aa 27       	eor	r26, r26
     f58:	f0 0d       	add	r31, r0
     f5a:	b1 1d       	adc	r27, r1
     f5c:	aa 1f       	adc	r26, r26
     f5e:	64 9f       	mul	r22, r20
     f60:	66 27       	eor	r22, r22
     f62:	b0 0d       	add	r27, r0
     f64:	a1 1d       	adc	r26, r1
     f66:	66 1f       	adc	r22, r22
     f68:	82 9f       	mul	r24, r18
     f6a:	22 27       	eor	r18, r18
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	62 1f       	adc	r22, r18
     f72:	73 9f       	mul	r23, r19
     f74:	b0 0d       	add	r27, r0
     f76:	a1 1d       	adc	r26, r1
     f78:	62 1f       	adc	r22, r18
     f7a:	83 9f       	mul	r24, r19
     f7c:	a0 0d       	add	r26, r0
     f7e:	61 1d       	adc	r22, r1
     f80:	22 1f       	adc	r18, r18
     f82:	74 9f       	mul	r23, r20
     f84:	33 27       	eor	r19, r19
     f86:	a0 0d       	add	r26, r0
     f88:	61 1d       	adc	r22, r1
     f8a:	23 1f       	adc	r18, r19
     f8c:	84 9f       	mul	r24, r20
     f8e:	60 0d       	add	r22, r0
     f90:	21 1d       	adc	r18, r1
     f92:	82 2f       	mov	r24, r18
     f94:	76 2f       	mov	r23, r22
     f96:	6a 2f       	mov	r22, r26
     f98:	11 24       	eor	r1, r1
     f9a:	9f 57       	subi	r25, 0x7F	; 127
     f9c:	50 40       	sbci	r21, 0x00	; 0
     f9e:	9a f0       	brmi	.+38     	; 0xfc6 <__mulsf3_pse+0x88>
     fa0:	f1 f0       	breq	.+60     	; 0xfde <__mulsf3_pse+0xa0>
     fa2:	88 23       	and	r24, r24
     fa4:	4a f0       	brmi	.+18     	; 0xfb8 <__mulsf3_pse+0x7a>
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	bb 1f       	adc	r27, r27
     fac:	66 1f       	adc	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	50 40       	sbci	r21, 0x00	; 0
     fb6:	a9 f7       	brne	.-22     	; 0xfa2 <__mulsf3_pse+0x64>
     fb8:	9e 3f       	cpi	r25, 0xFE	; 254
     fba:	51 05       	cpc	r21, r1
     fbc:	80 f0       	brcs	.+32     	; 0xfde <__mulsf3_pse+0xa0>
     fbe:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
     fc2:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_szero>
     fc6:	5f 3f       	cpi	r21, 0xFF	; 255
     fc8:	e4 f3       	brlt	.-8      	; 0xfc2 <__mulsf3_pse+0x84>
     fca:	98 3e       	cpi	r25, 0xE8	; 232
     fcc:	d4 f3       	brlt	.-12     	; 0xfc2 <__mulsf3_pse+0x84>
     fce:	86 95       	lsr	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b7 95       	ror	r27
     fd6:	f7 95       	ror	r31
     fd8:	e7 95       	ror	r30
     fda:	9f 5f       	subi	r25, 0xFF	; 255
     fdc:	c1 f7       	brne	.-16     	; 0xfce <__mulsf3_pse+0x90>
     fde:	fe 2b       	or	r31, r30
     fe0:	88 0f       	add	r24, r24
     fe2:	91 1d       	adc	r25, r1
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__fp_inf>:
     fec:	97 f9       	bld	r25, 7
     fee:	9f 67       	ori	r25, 0x7F	; 127
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <__fp_nan>:
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	80 ec       	ldi	r24, 0xC0	; 192
     ffc:	08 95       	ret

00000ffe <__fp_pscA>:
     ffe:	00 24       	eor	r0, r0
    1000:	0a 94       	dec	r0
    1002:	16 16       	cp	r1, r22
    1004:	17 06       	cpc	r1, r23
    1006:	18 06       	cpc	r1, r24
    1008:	09 06       	cpc	r0, r25
    100a:	08 95       	ret

0000100c <__fp_pscB>:
    100c:	00 24       	eor	r0, r0
    100e:	0a 94       	dec	r0
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	14 06       	cpc	r1, r20
    1016:	05 06       	cpc	r0, r21
    1018:	08 95       	ret

0000101a <__fp_round>:
    101a:	09 2e       	mov	r0, r25
    101c:	03 94       	inc	r0
    101e:	00 0c       	add	r0, r0
    1020:	11 f4       	brne	.+4      	; 0x1026 <__fp_round+0xc>
    1022:	88 23       	and	r24, r24
    1024:	52 f0       	brmi	.+20     	; 0x103a <__fp_round+0x20>
    1026:	bb 0f       	add	r27, r27
    1028:	40 f4       	brcc	.+16     	; 0x103a <__fp_round+0x20>
    102a:	bf 2b       	or	r27, r31
    102c:	11 f4       	brne	.+4      	; 0x1032 <__fp_round+0x18>
    102e:	60 ff       	sbrs	r22, 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <__fp_round+0x20>
    1032:	6f 5f       	subi	r22, 0xFF	; 255
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	08 95       	ret

0000103c <_exit>:
    103c:	f8 94       	cli

0000103e <__stop_program>:
    103e:	ff cf       	rjmp	.-2      	; 0x103e <__stop_program>
